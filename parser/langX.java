/* Generated By:JavaCC: Do not edit this line. langX.java */
package parser;
import java.io.*;


public class langX implements langXConstants {
final static String Version = "X++ Compiler - Version 1.0 - 2004";
int contParseError = 0;           // contador de erros sint�ticos


// Define o m�todo "main" da classe langX.  
  public  static void main(String args[]) throws ParseException
  {
  boolean debug = false;

    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador l�xico/sint�tico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l� os par�metros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
    if (args[i].equals("-debug_AS") )
            debug = true;
    else
        {
            System.out.println("Usage is: java langX [-debug_AS] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // l� da entrada padr�o      
        System.out.println("Reading from standard input . . .");
        parser = new langX(System.in); // cria AS
     }
     else
    {       // l� do arquivo
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new langX(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

    if (! debug) parser.disable_tracing(); // desabilita verbose do AS

    try {
        parser.program();   // chama o m�todo que faz a an�lise
    }
    catch (ParseException e)
    {
    System.err.println(e.getMessage());
    parser.contParseError = 1;   // n�o existe recupera��o de erros
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\u005c"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

  final public void program() throws ParseException {
    trace_call("program");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        classlist();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } finally {
      trace_return("program");
    }
  }

  final public void classlist() throws ParseException {
    trace_call("classlist");
    try {
      classdecl();
      if (jj_2_1(2)) {
        classlist();
      } else {
        ;
      }
    } finally {
      trace_return("classlist");
    }
  }

  final public void classdecl() throws ParseException {
    trace_call("classdecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENT);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      classbody();
    } finally {
      trace_return("classdecl");
    }
  }

  final public void classbody() throws ParseException {
    trace_call("classbody");
    try {
      jj_consume_token(LBRACE);
      if (jj_2_2(2)) {
        classlist();
      } else {
        ;
      }
      label_1:
      while (true) {
        if (jj_2_3(3)) {
          ;
        } else {
          break label_1;
        }
        vardecl();
        jj_consume_token(SEMICOLON);
      }
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
        atribstat();
        jj_consume_token(SEMICOLON);
      }
      label_3:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_3;
        }
        constructdecl();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
        case FINAL:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case IDENT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        methoddecl();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("classbody");
    }
  }

  final public void vardecl() throws ParseException {
    trace_call("vardecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case STRING:
      case CHAR:
      case BOOLEAN:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FLOAT:
        primitivetype();
        break;
      case IDENT:
        jj_consume_token(IDENT);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENT);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENT);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_7;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      }
    } finally {
      trace_return("vardecl");
    }
  }

  final public void constructdecl() throws ParseException {
    trace_call("constructdecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(CONSTRUCTOR);
      methodbody();
    } finally {
      trace_return("constructdecl");
    }
  }

  final public void methoddecl() throws ParseException {
    trace_call("methoddecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case STRING:
      case CHAR:
      case BOOLEAN:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FLOAT:
        primitivetype();
        break;
      case IDENT:
        jj_consume_token(IDENT);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      jj_consume_token(IDENT);
      methodbody();
    } finally {
      trace_return("methoddecl");
    }
  }

  final public void methodbody() throws ParseException {
    trace_call("methodbody");
    try {
      jj_consume_token(LPAREN);
      paramlist();
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("methodbody");
    }
  }

  final public void paramlist() throws ParseException {
    trace_call("paramlist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case STRING:
      case CHAR:
      case BOOLEAN:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FLOAT:
      case IDENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
          primitivetype();
          break;
        case IDENT:
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENT);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_9;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
            primitivetype();
            break;
          case IDENT:
            jj_consume_token(IDENT);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(IDENT);
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[23] = jj_gen;
              break label_11;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void statement() throws ParseException {
    trace_call("statement");
    try {
      if (jj_2_6(2)) {
        vardecl();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_7(3)) {
        atribstat();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRINT:
          printstat();
          jj_consume_token(SEMICOLON);
          break;
        case READ:
          readstat();
          jj_consume_token(SEMICOLON);
          break;
        case RETURN:
          returnstat();
          jj_consume_token(SEMICOLON);
          break;
        case SUPER:
          superstat();
          jj_consume_token(SEMICOLON);
          break;
        case IF:
          ifstat();
          break;
        case FOR:
          forstat();
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          statlist();
          jj_consume_token(RBRACE);
          break;
        case BREAK:
          jj_consume_token(BREAK);
          jj_consume_token(SEMICOLON);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case IDENT:
          methodcall();
          jj_consume_token(SEMICOLON);
          break;
        case DO:
          dowhilestat();
          jj_consume_token(SEMICOLON);
          break;
        case WHILE:
          whilestat();
          break;
        case SWITCH:
          switchstat();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("statement");
    }
  }

//mudanca
  final public void methodcall() throws ParseException {
    trace_call("methodcall");
    try {
      jj_consume_token(IDENT);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENT);
      }
      jj_consume_token(LPAREN);
      paramlist();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("methodcall");
    }
  }

  final public void atribstat() throws ParseException {
    trace_call("atribstat");
    try {
      lvalue();
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        alocexpression();
        break;
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_8(3)) {
          expression();
        } else if (jj_2_9(3)) {
          methodcall();
        } else if (jj_2_10(3)) {
          logicexpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("atribstat");
    }
  }

  final public void printstat() throws ParseException {
    trace_call("printstat");
    try {
      jj_consume_token(PRINT);
      if (jj_2_11(3)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case boolean_constant:
        case IDENT:
        case LPAREN:
        case NOT:
          logicexpression();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("printstat");
    }
  }

  final public void readstat() throws ParseException {
    trace_call("readstat");
    try {
      jj_consume_token(READ);
      lvalue();
    } finally {
      trace_return("readstat");
    }
  }

  final public void returnstat() throws ParseException {
    trace_call("returnstat");
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
      case string_constant:
      case null_constant:
      case boolean_constant:
      case char_constant:
      case double_constant:
      case byte_constant:
      case short_constant:
      case long_constant:
      case float_constant:
      case IDENT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
        if (jj_2_12(3)) {
          expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case boolean_constant:
          case IDENT:
          case LPAREN:
          case NOT:
            logicexpression();
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } finally {
      trace_return("returnstat");
    }
  }

  final public void superstat() throws ParseException {
    trace_call("superstat");
    try {
      jj_consume_token(SUPER);
      jj_consume_token(LPAREN);
      arglist();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("superstat");
    }
  }

  final public void ifstat() throws ParseException {
    trace_call("ifstat");
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      if (jj_2_13(3)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case boolean_constant:
        case IDENT:
        case LPAREN:
        case NOT:
          logicexpression();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      statement();
      if (jj_2_14(2)) {
        jj_consume_token(ELSE);
        statement();
      } else {
        ;
      }
    } finally {
      trace_return("ifstat");
    }
  }

  final public void forstat() throws ParseException {
    trace_call("forstat");
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        atribstat();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
      case string_constant:
      case null_constant:
      case boolean_constant:
      case char_constant:
      case double_constant:
      case byte_constant:
      case short_constant:
      case long_constant:
      case float_constant:
      case IDENT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
        if (jj_2_15(3)) {
          expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case boolean_constant:
          case IDENT:
          case LPAREN:
          case NOT:
            logicexpression();
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        atribstat();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("forstat");
    }
  }

  final public void whilestat() throws ParseException {
    trace_call("whilestat");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      if (jj_2_16(3)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case boolean_constant:
        case IDENT:
        case LPAREN:
        case NOT:
          logicexpression();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("whilestat");
    }
  }

  final public void dowhilestat() throws ParseException {
    trace_call("dowhilestat");
    try {
      jj_consume_token(DO);
      statement();
      jj_consume_token(LPAREN);
      if (jj_2_17(3)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case boolean_constant:
        case IDENT:
        case LPAREN:
        case NOT:
          logicexpression();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("dowhilestat");
    }
  }

  final public void switchstat() throws ParseException {
    trace_call("switchstat");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      jj_consume_token(IDENT);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULTT:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_13;
        }
        switchcasestat();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("switchstat");
    }
  }

  final public void switchcasestat() throws ParseException {
    trace_call("switchcasestat");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        factor();
        break;
      case DEFAULTT:
        jj_consume_token(DEFAULTT);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOISP);
      statement();
    } finally {
      trace_return("switchcasestat");
    }
  }

  final public void statlist() throws ParseException {
    trace_call("statlist");
    try {
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case FOR:
      case IF:
      case INT:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case WHILE:
      case DO:
      case SWITCH:
      case CHAR:
      case BOOLEAN:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FLOAT:
      case FINAL:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case IDENT:
      case LBRACE:
      case SEMICOLON:
        statlist();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } finally {
      trace_return("statlist");
    }
  }

  final public void lvalue() throws ParseException {
    trace_call("lvalue");
    try {
      jj_consume_token(IDENT);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case DOT:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          expression();
          jj_consume_token(RBRACKET);
          break;
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(IDENT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            arglist();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("lvalue");
    }
  }

  final public void alocexpression() throws ParseException {
    trace_call("alocexpression");
    try {
      jj_consume_token(NEW);
      if (jj_2_18(2)) {
        jj_consume_token(IDENT);
        jj_consume_token(LPAREN);
        arglist();
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
            primitivetype();
            break;
          case IDENT:
            jj_consume_token(IDENT);
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_15:
          while (true) {
            jj_consume_token(LBRACKET);
            expression();
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[45] = jj_gen;
              break label_15;
            }
          }
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("alocexpression");
    }
  }

  final public void expression() throws ParseException {
    trace_call("expression");
    try {
      numexpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NEQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case EQ:
          jj_consume_token(EQ);
          break;
        case NEQ:
          jj_consume_token(NEQ);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        numexpr();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void logicexpression() throws ParseException {
    trace_call("logicexpression");
    try {
      logicterm();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case XOR:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          break;
        case XOR:
          jj_consume_token(XOR);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        logicterm();
      }
    } finally {
      trace_return("logicexpression");
    }
  }

  final public void logicterm() throws ParseException {
    trace_call("logicterm");
    try {
      logicunaryexpr();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_17;
        }
        jj_consume_token(AND);
        logicunaryexpr();
      }
    } finally {
      trace_return("logicterm");
    }
  }

  final public void logicunaryexpr() throws ParseException {
    trace_call("logicunaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      logicfactor();
    } finally {
      trace_return("logicunaryexpr");
    }
  }

  final public void logicfactor() throws ParseException {
    trace_call("logicfactor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case boolean_constant:
        jj_consume_token(boolean_constant);
        break;
      default:
        jj_la1[53] = jj_gen;
        if (jj_2_19(3)) {
          methodcall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            jj_consume_token(IDENT);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            expression();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("logicfactor");
    }
  }

  final public void numexpr() throws ParseException {
    trace_call("numexpr");
    try {
      term();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
      unaryexpr();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void unaryexpr() throws ParseException {
    trace_call("unaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      case boolean_constant:
        jj_consume_token(boolean_constant);
        break;
      case char_constant:
        jj_consume_token(char_constant);
        break;
      case double_constant:
        jj_consume_token(double_constant);
        break;
      case byte_constant:
        jj_consume_token(byte_constant);
        break;
      case short_constant:
        jj_consume_token(short_constant);
        break;
      case long_constant:
        jj_consume_token(long_constant);
        break;
      case float_constant:
        jj_consume_token(float_constant);
        break;
      case null_constant:
        jj_consume_token(null_constant);
        break;
      default:
        jj_la1[61] = jj_gen;
        if (jj_2_20(3)) {
          lvalue();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            methodcall();
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            expression();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[62] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void arglist() throws ParseException {
    trace_call("arglist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
      case string_constant:
      case null_constant:
      case boolean_constant:
      case char_constant:
      case double_constant:
      case byte_constant:
      case short_constant:
      case long_constant:
      case float_constant:
      case IDENT:
      case LPAREN:
      case PLUS:
      case MINUS:
        expression();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[63] = jj_gen;
            break label_20;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
    } finally {
      trace_return("arglist");
    }
  }

  final public void primitivetype() throws ParseException {
    trace_call("primitivetype");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case BYTE:
        jj_consume_token(BYTE);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("primitivetype");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("constructdecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(CONSTRUCTOR)) { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_36()) { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (!jj_rescan) trace_call("alocexpression(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("vardecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    }
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (!jj_rescan) trace_call("lvalue(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_10() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (!jj_rescan) trace_call("switchstat(LOOKING AHEAD...)");
    if (jj_scan_token(SWITCH)) { if (!jj_rescan) trace_return("switchstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("switchstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (!jj_rescan) trace_call("classdecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_71() {
    if (!jj_rescan) trace_call("dowhilestat(LOOKING AHEAD...)");
    if (jj_scan_token(DO)) { if (!jj_rescan) trace_return("dowhilestat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("dowhilestat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("classlist(LOOKING AHEAD...)");
    if (jj_3R_30()) { if (!jj_rescan) trace_return("classlist(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("classlist(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (!jj_rescan) trace_call("whilestat(LOOKING AHEAD...)");
    if (jj_scan_token(WHILE)) { if (!jj_rescan) trace_return("whilestat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("whilestat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (!jj_rescan) trace_call("forstat(LOOKING AHEAD...)");
    if (jj_scan_token(FOR)) { if (!jj_rescan) trace_return("forstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("forstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_8() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (!jj_rescan) trace_call("ifstat(LOOKING AHEAD...)");
    if (jj_scan_token(IF)) { if (!jj_rescan) trace_return("ifstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ifstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (!jj_rescan) trace_call("superstat(LOOKING AHEAD...)");
    if (jj_scan_token(SUPER)) { if (!jj_rescan) trace_return("superstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("superstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_58() {
    if (!jj_rescan) trace_call("primitivetype(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) { if (!jj_rescan) trace_return("primitivetype(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("primitivetype(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_67() {
    if (!jj_rescan) trace_call("returnstat(LOOKING AHEAD...)");
    if (jj_scan_token(RETURN)) { if (!jj_rescan) trace_return("returnstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("returnstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_37() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (!jj_rescan) trace_call("readstat(LOOKING AHEAD...)");
    if (jj_scan_token(READ)) { if (!jj_rescan) trace_return("readstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("readstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (!jj_rescan) trace_call("printstat(LOOKING AHEAD...)");
    if (jj_scan_token(PRINT)) { if (!jj_rescan) trace_return("printstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("printstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("atribstat(LOOKING AHEAD...)");
    if (jj_3R_29()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ASSIGN)) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("methodcall(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_41()) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(RPAREN)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_81() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (!jj_rescan) trace_call("unaryexpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_3R_81()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_52() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (!jj_rescan) trace_call("term(LOOKING AHEAD...)");
    if (jj_3R_76()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (!jj_rescan) trace_call("numexpr(LOOKING AHEAD...)");
    if (jj_3R_60()) { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_48() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (!jj_rescan) trace_call("logicfactor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_3R_82()) { if (!jj_rescan) trace_return("logicfactor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("logicfactor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (!jj_rescan) trace_call("statement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) { if (!jj_rescan) trace_return("statement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("statement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (!jj_rescan) trace_call("logicunaryexpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) jj_scanpos = xsp;
    if (jj_3R_79()) { if (!jj_rescan) trace_return("logicunaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("logicunaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_78() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (!jj_rescan) trace_call("logicterm(LOOKING AHEAD...)");
    if (jj_3R_63()) { if (!jj_rescan) trace_return("logicterm(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("logicterm(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_41() {
    if (!jj_rescan) trace_call("paramlist(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("paramlist(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_27() {
    if (!jj_rescan) trace_call("logicexpression(LOOKING AHEAD...)");
    if (jj_3R_42()) { if (!jj_rescan) trace_return("logicexpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("logicexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (!jj_rescan) trace_call("methodbody(LOOKING AHEAD...)");
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("methodbody(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("methodbody(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    if (jj_3R_38()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_18() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public langXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[66];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x0,0x10000,0x81080000,0x0,0x0,0x0,0x81080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81080000,0x0,0x81080000,0x0,0x0,0x81080000,0x0,0x81080000,0x1ee61000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x9fee1000,0x0,0x0,0x0,0x81080000,0x0,0x81080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81080000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x380,0x380,0x380,0x0,0x1003ff,0x380,0x380,0x40,0x10003f,0x8000000,0x40000000,0x8000000,0x380,0x380,0x380,0x380,0x40,0x10003f,0x8000000,0x10003f,0x8000000,0x40000000,0x10003f,0x8000000,0x10003f,0x22100000,0x80000000,0x0,0x902000,0x902000,0x9ffc00,0x902000,0x100000,0x902000,0x9ffc00,0x100000,0x902000,0x902000,0x0,0x0,0x221003ff,0x88000000,0x800000,0x88000000,0x10003f,0x8000000,0x10003f,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,0xffc00,0x900000,0x40000000,0x9ffc00,0x3f,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x10300,0x10000,0x0,0x10000,0x10300,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc,0xfc,0xc000,0xc000,0x2000,0x10000,0x0,0x0,0x300,0x300,0x1c00,0x1c00,0x300,0x300,0x0,0x0,0x0,0x300,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public langX(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public langX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new langXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public langX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new langXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public langX(langXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(langXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 66; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
